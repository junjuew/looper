`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: UW-Madison
// Engineer: J.J.(Junjue) Wang, Pari Lingampally, Zheng Ling
// 
// Create Date: Feb 03   
// Design Name: SPART
// Module Name: top_level
// Project Name: SPART
// Target Devices: FPGA Virtex 2 Pro
// Tool versions: Xilinx 10.1
// Description: 
// The overall purpose of the SPART (Special Purpose Asynchronous Receiver/Transmitter) is to function as a serial I/O interface of communicating between the computer and the FPGA. 
//
// Dependencies: spart, driver
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////

module top_level(
    input wire clk,         // 100mhz clock
    input wire rst,         // Asynchronous reset, tied to dip switch 0
    output wire txd,        // RS232 Transmit Data
    input wire rxd,         // RS232 Recieve Data
    input wire [1:0] br_cfg // Baud Rate Configuration, Tied to dip switches 2 and 3
    );
   
        wire iocs;
        wire iorw;
        wire rda;
        wire tbr;
        wire [1:0] ioaddr;
        wire [7:0] databus;
        
        // Instantiate your SPART here
        spart spart0( .clk(clk),
                 .rst(rst),
                                          .iocs(iocs),
                                          .iorw(iorw),
                                          .rda(rda),
                                          .tbr(tbr),
                                          .ioaddr(ioaddr),
                                          .databus(databus),
                                          .txd(txd),
                                          .rxd(rxd)
                                        );

        // Instantiate your driver here
        driver driver0( .clk(clk),
                        .rst(rst),
                                                 .br_cfg(br_cfg),
                                                 .iocs(iocs),
                                                 .iorw(iorw),
                                                 .rda(rda),
                                                 .tbr(tbr),
                                                 .ioaddr(ioaddr),
                                                 .databus(databus)
                                         );
                                         
endmodule
