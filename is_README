stallocation instruction packet format:
        inst_valid |  rs    |  rd   |  rt   | imm_valid_bit | ...| RegWr | preg
          55         54-50    49-45   44-40      39 --------------- 7      6-0

isq_lin: output format
       brn_wat | wat | inst 
         57      56    55-0

isq: isq will add idx to the output of isq_lin so the output becomes ( input to tpu )
         idx | brn _wat  | wat | inst
        63-58    57        56    55-0
        
tpu: output format (input to pdc)
idx | brn_wat | wat |  inst_valid | psrc1 | psrc2 | imm_valid| imm | LDI | brn | jmp_valid_bit | jump |... |add| mult |addr| invtRt | RegWrite| pr_valid | pr_number
62-57  56       55       54         53-47   46-40     39     38-23  22   21-20   19            18-17 ------11   10     9     8         7         6          5-0
        
        physical register to be freed is output in a separate fre_preg signal

pdc: supposed output (need to change pdc)
     inst_valid | idx  | psrc1 | psrc2 | pdest | imm_valid_bit | .....| RegWr | freeReg
        65       64-59   58-52   51-45   44-39   38              37-7    6       5-0

     regWr signals is the valid bit for both pdest and freeReg



is stage tb input inst components:

        inst_valid =0;
        Rs_valid_bit=0;
        Rs=0;
        Rd_valid_bit=0;
        Rd=0;
        Rt_valid_bit=0;
        Rt=0;
        imm_valid_bit=0;
        imme=0;
        LDI=0;
        brn=0;
        jmp_valid_bit=0;
        jump=0;
        MemRd=0;
        MemWr=0;
        ALU_ctrl=0;
        ALU_to_adder=0;
        ALU_to_mult=0;
        ALU_to_addr=0;
        invtRt=0;
        RegWr=0;
        pr_valid=0;
        pr_number=0;     

Current implementation scheme:
1. when the issue queue is full: when arch=0, when counter becomes f, isq queue immediately signals full and disable, leaving counter pointing to f and no data is loaded in isq line 60-63. 
                                 When issue queue full is resolved, isq line 60-63 loads in data and start working again. 

   Same happens, when arch=1, and counter becomes 7, no data is loaded into isq 28-31

2. Such scheme for freezing counter's value when issue queue is full makes sure that arch_swt signal in tpu is working correctly

3. Arch swt in TPU will only happen until all instructions in the active region resolved, not only sent. 
   reason: for example, idx 31 is sent but not resolved. At this time, arch swt cannot happen, since if happened (assume , top segment is the current header), middle segment will clock in idx 31's dest register as invalid. When we resolve it, we can only update idx 31's pdest instead of updating middle segment.




Synthesis warning:

1. tpu_out (tpu.v): bit 6 and bit 56 are unused, since bit 6 -- pr_valid -- is combined with RegWrite. 
            bit 56 (brn_wat) is not used in pdc and output, since only tpu use it to determine the arch swt.
2. free_preg (pdc.v): bit 6 is not used, since it is replaced by RegWrite signal            
3. clr_val (isq_lin.v): is not used, but is left there as a port
4. changed lsrc2 in tpu_lin.v to 4 bits, remove the valid bit, since I'm using isq_lin to get the valid bit
5. inst (isq_lin.v): bit 6(pr_valid) and 39(immediate valid) are not used by is or later stage
6. changed br_snt to 7 bits instead of 8 bits
7. combinational loop in issue: since the tpu will bypass the header when needed, then there is a loop formed depending on what the mux will choose.
: need to test such case 


Current Problem:
beqz_mapping
1. current mapping is correct, at 995 ns, all top region is filled with non-valid inst, counter right now is 0, meaning that we are about to load instructions from idx 0, so that most up-to-date should be get from idx0. no architecture swt is going to happen since counter is at 0, we need to fill and execute everything in from idx 0 and finish that region to get another arch swt
2. think about changing the design such that every time arch_swt happen we mark the instructions in the origin operating region as invalid