
next inst: ldi r2, 0		// this would be prev number1
current inst: ldi r1, 0		// this would be the counter
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 0 decimal: 0
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 0 decimal: 0
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: ldi r3, 1 		// this would be prev number2
current inst: ldi r2, 0		// this would be prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 0 decimal: 0
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 0 decimal: 0
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: ldi r4, 0		// constant 0
current inst: ldi r3, 1 		// this would be prev number2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 0 decimal: 0
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: ldi r6, 1 		// constant 1
current inst: ldi r4, 0		// constant 0
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 0 decimal: 0
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: ldi r7, 23		// constant 23
current inst: ldi r6, 1 		// constant 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 1 decimal: 1
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: .loop_start:
current inst: ldi r7, 23		// constant 23
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 0 decimal: 0
R6: hex: 1 decimal: 1
R7: hex: 17 decimal: 23
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0
current inst: .loop_start:

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 0 decimal: 0
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 1 decimal: 1
R6: hex: 1 decimal: 1
R7: hex: 17 decimal: 23
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 1 decimal: 1
R6: hex: 1 decimal: 1
R7: hex: 17 decimal: 23
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 1 decimal: 1
R6: hex: 1 decimal: 1
R7: hex: 17 decimal: 23
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 1 decimal: 1
R6: hex: 1 decimal: 1
R7: hex: 16 decimal: 22
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 1 decimal: 1
R6: hex: 1 decimal: 1
R7: hex: 16 decimal: 22
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 2 decimal: 2
R6: hex: 1 decimal: 1
R7: hex: 16 decimal: 22
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 1 decimal: 1
R4: hex: 0 decimal: 0
R5: hex: 2 decimal: 2
R6: hex: 1 decimal: 1
R7: hex: 16 decimal: 22
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 2 decimal: 2
R4: hex: 0 decimal: 0
R5: hex: 2 decimal: 2
R6: hex: 1 decimal: 1
R7: hex: 16 decimal: 22
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 2 decimal: 2
R4: hex: 0 decimal: 0
R5: hex: 2 decimal: 2
R6: hex: 1 decimal: 1
R7: hex: 15 decimal: 21
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 2 decimal: 2
R4: hex: 0 decimal: 0
R5: hex: 2 decimal: 2
R6: hex: 1 decimal: 1
R7: hex: 15 decimal: 21
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1 decimal: 1
R3: hex: 2 decimal: 2
R4: hex: 0 decimal: 0
R5: hex: 3 decimal: 3
R6: hex: 1 decimal: 1
R7: hex: 15 decimal: 21
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2 decimal: 2
R3: hex: 2 decimal: 2
R4: hex: 0 decimal: 0
R5: hex: 3 decimal: 3
R6: hex: 1 decimal: 1
R7: hex: 15 decimal: 21
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2 decimal: 2
R3: hex: 3 decimal: 3
R4: hex: 0 decimal: 0
R5: hex: 3 decimal: 3
R6: hex: 1 decimal: 1
R7: hex: 15 decimal: 21
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2 decimal: 2
R3: hex: 3 decimal: 3
R4: hex: 0 decimal: 0
R5: hex: 3 decimal: 3
R6: hex: 1 decimal: 1
R7: hex: 14 decimal: 20
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2 decimal: 2
R3: hex: 3 decimal: 3
R4: hex: 0 decimal: 0
R5: hex: 3 decimal: 3
R6: hex: 1 decimal: 1
R7: hex: 14 decimal: 20
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2 decimal: 2
R3: hex: 3 decimal: 3
R4: hex: 0 decimal: 0
R5: hex: 5 decimal: 5
R6: hex: 1 decimal: 1
R7: hex: 14 decimal: 20
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3 decimal: 3
R3: hex: 3 decimal: 3
R4: hex: 0 decimal: 0
R5: hex: 5 decimal: 5
R6: hex: 1 decimal: 1
R7: hex: 14 decimal: 20
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3 decimal: 3
R3: hex: 5 decimal: 5
R4: hex: 0 decimal: 0
R5: hex: 5 decimal: 5
R6: hex: 1 decimal: 1
R7: hex: 14 decimal: 20
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3 decimal: 3
R3: hex: 5 decimal: 5
R4: hex: 0 decimal: 0
R5: hex: 5 decimal: 5
R6: hex: 1 decimal: 1
R7: hex: 13 decimal: 19
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3 decimal: 3
R3: hex: 5 decimal: 5
R4: hex: 0 decimal: 0
R5: hex: 5 decimal: 5
R6: hex: 1 decimal: 1
R7: hex: 13 decimal: 19
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3 decimal: 3
R3: hex: 5 decimal: 5
R4: hex: 0 decimal: 0
R5: hex: 8 decimal: 8
R6: hex: 1 decimal: 1
R7: hex: 13 decimal: 19
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 5 decimal: 5
R3: hex: 5 decimal: 5
R4: hex: 0 decimal: 0
R5: hex: 8 decimal: 8
R6: hex: 1 decimal: 1
R7: hex: 13 decimal: 19
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 5 decimal: 5
R3: hex: 8 decimal: 8
R4: hex: 0 decimal: 0
R5: hex: 8 decimal: 8
R6: hex: 1 decimal: 1
R7: hex: 13 decimal: 19
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 5 decimal: 5
R3: hex: 8 decimal: 8
R4: hex: 0 decimal: 0
R5: hex: 8 decimal: 8
R6: hex: 1 decimal: 1
R7: hex: 12 decimal: 18
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 5 decimal: 5
R3: hex: 8 decimal: 8
R4: hex: 0 decimal: 0
R5: hex: 8 decimal: 8
R6: hex: 1 decimal: 1
R7: hex: 12 decimal: 18
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 5 decimal: 5
R3: hex: 8 decimal: 8
R4: hex: 0 decimal: 0
R5: hex: d decimal: 13
R6: hex: 1 decimal: 1
R7: hex: 12 decimal: 18
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 8 decimal: 8
R3: hex: 8 decimal: 8
R4: hex: 0 decimal: 0
R5: hex: d decimal: 13
R6: hex: 1 decimal: 1
R7: hex: 12 decimal: 18
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 8 decimal: 8
R3: hex: d decimal: 13
R4: hex: 0 decimal: 0
R5: hex: d decimal: 13
R6: hex: 1 decimal: 1
R7: hex: 12 decimal: 18
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 8 decimal: 8
R3: hex: d decimal: 13
R4: hex: 0 decimal: 0
R5: hex: d decimal: 13
R6: hex: 1 decimal: 1
R7: hex: 11 decimal: 17
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 8 decimal: 8
R3: hex: d decimal: 13
R4: hex: 0 decimal: 0
R5: hex: d decimal: 13
R6: hex: 1 decimal: 1
R7: hex: 11 decimal: 17
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 8 decimal: 8
R3: hex: d decimal: 13
R4: hex: 0 decimal: 0
R5: hex: 15 decimal: 21
R6: hex: 1 decimal: 1
R7: hex: 11 decimal: 17
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: d decimal: 13
R3: hex: d decimal: 13
R4: hex: 0 decimal: 0
R5: hex: 15 decimal: 21
R6: hex: 1 decimal: 1
R7: hex: 11 decimal: 17
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: d decimal: 13
R3: hex: 15 decimal: 21
R4: hex: 0 decimal: 0
R5: hex: 15 decimal: 21
R6: hex: 1 decimal: 1
R7: hex: 11 decimal: 17
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: d decimal: 13
R3: hex: 15 decimal: 21
R4: hex: 0 decimal: 0
R5: hex: 15 decimal: 21
R6: hex: 1 decimal: 1
R7: hex: 10 decimal: 16
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: d decimal: 13
R3: hex: 15 decimal: 21
R4: hex: 0 decimal: 0
R5: hex: 15 decimal: 21
R6: hex: 1 decimal: 1
R7: hex: 10 decimal: 16
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: d decimal: 13
R3: hex: 15 decimal: 21
R4: hex: 0 decimal: 0
R5: hex: 22 decimal: 34
R6: hex: 1 decimal: 1
R7: hex: 10 decimal: 16
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 15 decimal: 21
R3: hex: 15 decimal: 21
R4: hex: 0 decimal: 0
R5: hex: 22 decimal: 34
R6: hex: 1 decimal: 1
R7: hex: 10 decimal: 16
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 15 decimal: 21
R3: hex: 22 decimal: 34
R4: hex: 0 decimal: 0
R5: hex: 22 decimal: 34
R6: hex: 1 decimal: 1
R7: hex: 10 decimal: 16
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 15 decimal: 21
R3: hex: 22 decimal: 34
R4: hex: 0 decimal: 0
R5: hex: 22 decimal: 34
R6: hex: 1 decimal: 1
R7: hex: f decimal: 15
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 15 decimal: 21
R3: hex: 22 decimal: 34
R4: hex: 0 decimal: 0
R5: hex: 22 decimal: 34
R6: hex: 1 decimal: 1
R7: hex: f decimal: 15
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 15 decimal: 21
R3: hex: 22 decimal: 34
R4: hex: 0 decimal: 0
R5: hex: 37 decimal: 55
R6: hex: 1 decimal: 1
R7: hex: f decimal: 15
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 22 decimal: 34
R3: hex: 22 decimal: 34
R4: hex: 0 decimal: 0
R5: hex: 37 decimal: 55
R6: hex: 1 decimal: 1
R7: hex: f decimal: 15
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 22 decimal: 34
R3: hex: 37 decimal: 55
R4: hex: 0 decimal: 0
R5: hex: 37 decimal: 55
R6: hex: 1 decimal: 1
R7: hex: f decimal: 15
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 22 decimal: 34
R3: hex: 37 decimal: 55
R4: hex: 0 decimal: 0
R5: hex: 37 decimal: 55
R6: hex: 1 decimal: 1
R7: hex: e decimal: 14
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 22 decimal: 34
R3: hex: 37 decimal: 55
R4: hex: 0 decimal: 0
R5: hex: 37 decimal: 55
R6: hex: 1 decimal: 1
R7: hex: e decimal: 14
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 22 decimal: 34
R3: hex: 37 decimal: 55
R4: hex: 0 decimal: 0
R5: hex: 59 decimal: 89
R6: hex: 1 decimal: 1
R7: hex: e decimal: 14
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 37 decimal: 55
R3: hex: 37 decimal: 55
R4: hex: 0 decimal: 0
R5: hex: 59 decimal: 89
R6: hex: 1 decimal: 1
R7: hex: e decimal: 14
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 37 decimal: 55
R3: hex: 59 decimal: 89
R4: hex: 0 decimal: 0
R5: hex: 59 decimal: 89
R6: hex: 1 decimal: 1
R7: hex: e decimal: 14
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 37 decimal: 55
R3: hex: 59 decimal: 89
R4: hex: 0 decimal: 0
R5: hex: 59 decimal: 89
R6: hex: 1 decimal: 1
R7: hex: d decimal: 13
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 37 decimal: 55
R3: hex: 59 decimal: 89
R4: hex: 0 decimal: 0
R5: hex: 59 decimal: 89
R6: hex: 1 decimal: 1
R7: hex: d decimal: 13
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 37 decimal: 55
R3: hex: 59 decimal: 89
R4: hex: 0 decimal: 0
R5: hex: 90 decimal: 144
R6: hex: 1 decimal: 1
R7: hex: d decimal: 13
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 59 decimal: 89
R3: hex: 59 decimal: 89
R4: hex: 0 decimal: 0
R5: hex: 90 decimal: 144
R6: hex: 1 decimal: 1
R7: hex: d decimal: 13
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 59 decimal: 89
R3: hex: 90 decimal: 144
R4: hex: 0 decimal: 0
R5: hex: 90 decimal: 144
R6: hex: 1 decimal: 1
R7: hex: d decimal: 13
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 59 decimal: 89
R3: hex: 90 decimal: 144
R4: hex: 0 decimal: 0
R5: hex: 90 decimal: 144
R6: hex: 1 decimal: 1
R7: hex: c decimal: 12
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 59 decimal: 89
R3: hex: 90 decimal: 144
R4: hex: 0 decimal: 0
R5: hex: 90 decimal: 144
R6: hex: 1 decimal: 1
R7: hex: c decimal: 12
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 59 decimal: 89
R3: hex: 90 decimal: 144
R4: hex: 0 decimal: 0
R5: hex: e9 decimal: 233
R6: hex: 1 decimal: 1
R7: hex: c decimal: 12
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 90 decimal: 144
R3: hex: 90 decimal: 144
R4: hex: 0 decimal: 0
R5: hex: e9 decimal: 233
R6: hex: 1 decimal: 1
R7: hex: c decimal: 12
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 90 decimal: 144
R3: hex: e9 decimal: 233
R4: hex: 0 decimal: 0
R5: hex: e9 decimal: 233
R6: hex: 1 decimal: 1
R7: hex: c decimal: 12
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 90 decimal: 144
R3: hex: e9 decimal: 233
R4: hex: 0 decimal: 0
R5: hex: e9 decimal: 233
R6: hex: 1 decimal: 1
R7: hex: b decimal: 11
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 90 decimal: 144
R3: hex: e9 decimal: 233
R4: hex: 0 decimal: 0
R5: hex: e9 decimal: 233
R6: hex: 1 decimal: 1
R7: hex: b decimal: 11
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 90 decimal: 144
R3: hex: e9 decimal: 233
R4: hex: 0 decimal: 0
R5: hex: 179 decimal: 377
R6: hex: 1 decimal: 1
R7: hex: b decimal: 11
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: e9 decimal: 233
R3: hex: e9 decimal: 233
R4: hex: 0 decimal: 0
R5: hex: 179 decimal: 377
R6: hex: 1 decimal: 1
R7: hex: b decimal: 11
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: e9 decimal: 233
R3: hex: 179 decimal: 377
R4: hex: 0 decimal: 0
R5: hex: 179 decimal: 377
R6: hex: 1 decimal: 1
R7: hex: b decimal: 11
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: e9 decimal: 233
R3: hex: 179 decimal: 377
R4: hex: 0 decimal: 0
R5: hex: 179 decimal: 377
R6: hex: 1 decimal: 1
R7: hex: a decimal: 10
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: e9 decimal: 233
R3: hex: 179 decimal: 377
R4: hex: 0 decimal: 0
R5: hex: 179 decimal: 377
R6: hex: 1 decimal: 1
R7: hex: a decimal: 10
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: e9 decimal: 233
R3: hex: 179 decimal: 377
R4: hex: 0 decimal: 0
R5: hex: 262 decimal: 610
R6: hex: 1 decimal: 1
R7: hex: a decimal: 10
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 179 decimal: 377
R3: hex: 179 decimal: 377
R4: hex: 0 decimal: 0
R5: hex: 262 decimal: 610
R6: hex: 1 decimal: 1
R7: hex: a decimal: 10
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 179 decimal: 377
R3: hex: 262 decimal: 610
R4: hex: 0 decimal: 0
R5: hex: 262 decimal: 610
R6: hex: 1 decimal: 1
R7: hex: a decimal: 10
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 179 decimal: 377
R3: hex: 262 decimal: 610
R4: hex: 0 decimal: 0
R5: hex: 262 decimal: 610
R6: hex: 1 decimal: 1
R7: hex: 9 decimal: 9
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 179 decimal: 377
R3: hex: 262 decimal: 610
R4: hex: 0 decimal: 0
R5: hex: 262 decimal: 610
R6: hex: 1 decimal: 1
R7: hex: 9 decimal: 9
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 179 decimal: 377
R3: hex: 262 decimal: 610
R4: hex: 0 decimal: 0
R5: hex: 3db decimal: 987
R6: hex: 1 decimal: 1
R7: hex: 9 decimal: 9
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 262 decimal: 610
R3: hex: 262 decimal: 610
R4: hex: 0 decimal: 0
R5: hex: 3db decimal: 987
R6: hex: 1 decimal: 1
R7: hex: 9 decimal: 9
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 262 decimal: 610
R3: hex: 3db decimal: 987
R4: hex: 0 decimal: 0
R5: hex: 3db decimal: 987
R6: hex: 1 decimal: 1
R7: hex: 9 decimal: 9
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 262 decimal: 610
R3: hex: 3db decimal: 987
R4: hex: 0 decimal: 0
R5: hex: 3db decimal: 987
R6: hex: 1 decimal: 1
R7: hex: 8 decimal: 8
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 262 decimal: 610
R3: hex: 3db decimal: 987
R4: hex: 0 decimal: 0
R5: hex: 3db decimal: 987
R6: hex: 1 decimal: 1
R7: hex: 8 decimal: 8
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 262 decimal: 610
R3: hex: 3db decimal: 987
R4: hex: 0 decimal: 0
R5: hex: 63d decimal: 1597
R6: hex: 1 decimal: 1
R7: hex: 8 decimal: 8
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3db decimal: 987
R3: hex: 3db decimal: 987
R4: hex: 0 decimal: 0
R5: hex: 63d decimal: 1597
R6: hex: 1 decimal: 1
R7: hex: 8 decimal: 8
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3db decimal: 987
R3: hex: 63d decimal: 1597
R4: hex: 0 decimal: 0
R5: hex: 63d decimal: 1597
R6: hex: 1 decimal: 1
R7: hex: 8 decimal: 8
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3db decimal: 987
R3: hex: 63d decimal: 1597
R4: hex: 0 decimal: 0
R5: hex: 63d decimal: 1597
R6: hex: 1 decimal: 1
R7: hex: 7 decimal: 7
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3db decimal: 987
R3: hex: 63d decimal: 1597
R4: hex: 0 decimal: 0
R5: hex: 63d decimal: 1597
R6: hex: 1 decimal: 1
R7: hex: 7 decimal: 7
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 3db decimal: 987
R3: hex: 63d decimal: 1597
R4: hex: 0 decimal: 0
R5: hex: a18 decimal: 2584
R6: hex: 1 decimal: 1
R7: hex: 7 decimal: 7
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 63d decimal: 1597
R3: hex: 63d decimal: 1597
R4: hex: 0 decimal: 0
R5: hex: a18 decimal: 2584
R6: hex: 1 decimal: 1
R7: hex: 7 decimal: 7
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 63d decimal: 1597
R3: hex: a18 decimal: 2584
R4: hex: 0 decimal: 0
R5: hex: a18 decimal: 2584
R6: hex: 1 decimal: 1
R7: hex: 7 decimal: 7
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 63d decimal: 1597
R3: hex: a18 decimal: 2584
R4: hex: 0 decimal: 0
R5: hex: a18 decimal: 2584
R6: hex: 1 decimal: 1
R7: hex: 6 decimal: 6
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 63d decimal: 1597
R3: hex: a18 decimal: 2584
R4: hex: 0 decimal: 0
R5: hex: a18 decimal: 2584
R6: hex: 1 decimal: 1
R7: hex: 6 decimal: 6
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 63d decimal: 1597
R3: hex: a18 decimal: 2584
R4: hex: 0 decimal: 0
R5: hex: 1055 decimal: 4181
R6: hex: 1 decimal: 1
R7: hex: 6 decimal: 6
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: a18 decimal: 2584
R3: hex: a18 decimal: 2584
R4: hex: 0 decimal: 0
R5: hex: 1055 decimal: 4181
R6: hex: 1 decimal: 1
R7: hex: 6 decimal: 6
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: a18 decimal: 2584
R3: hex: 1055 decimal: 4181
R4: hex: 0 decimal: 0
R5: hex: 1055 decimal: 4181
R6: hex: 1 decimal: 1
R7: hex: 6 decimal: 6
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: a18 decimal: 2584
R3: hex: 1055 decimal: 4181
R4: hex: 0 decimal: 0
R5: hex: 1055 decimal: 4181
R6: hex: 1 decimal: 1
R7: hex: 5 decimal: 5
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: a18 decimal: 2584
R3: hex: 1055 decimal: 4181
R4: hex: 0 decimal: 0
R5: hex: 1055 decimal: 4181
R6: hex: 1 decimal: 1
R7: hex: 5 decimal: 5
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: a18 decimal: 2584
R3: hex: 1055 decimal: 4181
R4: hex: 0 decimal: 0
R5: hex: 1a6d decimal: 6765
R6: hex: 1 decimal: 1
R7: hex: 5 decimal: 5
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1055 decimal: 4181
R3: hex: 1055 decimal: 4181
R4: hex: 0 decimal: 0
R5: hex: 1a6d decimal: 6765
R6: hex: 1 decimal: 1
R7: hex: 5 decimal: 5
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1055 decimal: 4181
R3: hex: 1a6d decimal: 6765
R4: hex: 0 decimal: 0
R5: hex: 1a6d decimal: 6765
R6: hex: 1 decimal: 1
R7: hex: 5 decimal: 5
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1055 decimal: 4181
R3: hex: 1a6d decimal: 6765
R4: hex: 0 decimal: 0
R5: hex: 1a6d decimal: 6765
R6: hex: 1 decimal: 1
R7: hex: 4 decimal: 4
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1055 decimal: 4181
R3: hex: 1a6d decimal: 6765
R4: hex: 0 decimal: 0
R5: hex: 1a6d decimal: 6765
R6: hex: 1 decimal: 1
R7: hex: 4 decimal: 4
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1055 decimal: 4181
R3: hex: 1a6d decimal: 6765
R4: hex: 0 decimal: 0
R5: hex: 2ac2 decimal: 10946
R6: hex: 1 decimal: 1
R7: hex: 4 decimal: 4
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1a6d decimal: 6765
R3: hex: 1a6d decimal: 6765
R4: hex: 0 decimal: 0
R5: hex: 2ac2 decimal: 10946
R6: hex: 1 decimal: 1
R7: hex: 4 decimal: 4
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1a6d decimal: 6765
R3: hex: 2ac2 decimal: 10946
R4: hex: 0 decimal: 0
R5: hex: 2ac2 decimal: 10946
R6: hex: 1 decimal: 1
R7: hex: 4 decimal: 4
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1a6d decimal: 6765
R3: hex: 2ac2 decimal: 10946
R4: hex: 0 decimal: 0
R5: hex: 2ac2 decimal: 10946
R6: hex: 1 decimal: 1
R7: hex: 3 decimal: 3
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1a6d decimal: 6765
R3: hex: 2ac2 decimal: 10946
R4: hex: 0 decimal: 0
R5: hex: 2ac2 decimal: 10946
R6: hex: 1 decimal: 1
R7: hex: 3 decimal: 3
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 1a6d decimal: 6765
R3: hex: 2ac2 decimal: 10946
R4: hex: 0 decimal: 0
R5: hex: 452f decimal: 17711
R6: hex: 1 decimal: 1
R7: hex: 3 decimal: 3
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2ac2 decimal: 10946
R3: hex: 2ac2 decimal: 10946
R4: hex: 0 decimal: 0
R5: hex: 452f decimal: 17711
R6: hex: 1 decimal: 1
R7: hex: 3 decimal: 3
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2ac2 decimal: 10946
R3: hex: 452f decimal: 17711
R4: hex: 0 decimal: 0
R5: hex: 452f decimal: 17711
R6: hex: 1 decimal: 1
R7: hex: 3 decimal: 3
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2ac2 decimal: 10946
R3: hex: 452f decimal: 17711
R4: hex: 0 decimal: 0
R5: hex: 452f decimal: 17711
R6: hex: 1 decimal: 1
R7: hex: 2 decimal: 2
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2ac2 decimal: 10946
R3: hex: 452f decimal: 17711
R4: hex: 0 decimal: 0
R5: hex: 452f decimal: 17711
R6: hex: 1 decimal: 1
R7: hex: 2 decimal: 2
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 2ac2 decimal: 10946
R3: hex: 452f decimal: 17711
R4: hex: 0 decimal: 0
R5: hex: 6ff1 decimal: 28657
R6: hex: 1 decimal: 1
R7: hex: 2 decimal: 2
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 452f decimal: 17711
R3: hex: 452f decimal: 17711
R4: hex: 0 decimal: 0
R5: hex: 6ff1 decimal: 28657
R6: hex: 1 decimal: 1
R7: hex: 2 decimal: 2
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 452f decimal: 17711
R3: hex: 6ff1 decimal: 28657
R4: hex: 0 decimal: 0
R5: hex: 6ff1 decimal: 28657
R6: hex: 1 decimal: 1
R7: hex: 2 decimal: 2
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 452f decimal: 17711
R3: hex: 6ff1 decimal: 28657
R4: hex: 0 decimal: 0
R5: hex: 6ff1 decimal: 28657
R6: hex: 1 decimal: 1
R7: hex: 1 decimal: 1
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add	r5, r2, r3	// generate the next Fibonacci number
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 452f decimal: 17711
R3: hex: 6ff1 decimal: 28657
R4: hex: 0 decimal: 0
R5: hex: 6ff1 decimal: 28657
R6: hex: 1 decimal: 1
R7: hex: 1 decimal: 1
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r2, r3, r4	// update prev number 1
current inst: add	r5, r2, r3	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 452f decimal: 17711
R3: hex: 6ff1 decimal: 28657
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 1 decimal: 1
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r3, r5, r4	// update prev number 5
current inst: add r2, r3, r4	// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 6ff1 decimal: 28657
R3: hex: 6ff1 decimal: 28657
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 1 decimal: 1
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: sub r7, r7, r6	// r7 = r7 - 1
current inst: add r3, r5, r4	// update prev number 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 6ff1 decimal: 28657
R3: hex: b520 decimal: 46368
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 1 decimal: 1
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6	// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 6ff1 decimal: 28657
R3: hex: b520 decimal: 46368
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: add r5, r5, r4	// else r5 = r5
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 6ff1 decimal: 28657
R3: hex: b520 decimal: 46368
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0

next inst: end
current inst: add r5, r5, r4	// else r5 = r5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0 decimal: 0
R1: hex: 0 decimal: 0
R2: hex: 6ff1 decimal: 28657
R3: hex: b520 decimal: 46368
R4: hex: 0 decimal: 0
R5: hex: b520 decimal: 46368
R6: hex: 1 decimal: 1
R7: hex: 0 decimal: 0
R8: hex: 0 decimal: 0
R9: hex: 0 decimal: 0
R10: hex: 0 decimal: 0
R11: hex: 0 decimal: 0
R12: hex: 0 decimal: 0
R13: hex: 0 decimal: 0
R14: hex: 0 decimal: 0
R15: hex: 0 decimal: 0
Executed instruction #: 122
