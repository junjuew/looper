
current inst: ldi r1, 100		// memory base register

current inst: ldi r3, 100		// prev number1 memory base

current inst: ldi r5, 101		// prev number2 memory base

current inst: ldi r4, 0		// constant 0

current inst: ldi r6, 1 		// constant 1

current inst: ldi r2, 2		// constant 2

current inst: ldi r7, 23		// constant 23

current inst: str r4, r1, 0		// mem[100] = 0
***********************************
********   Memory write   ********
***********************************
memory[100] = 0

current inst: add r1, r1, r6		// r1 = 101

current inst: str r6, r1, 0		// mem[101] = 1
***********************************
********   Memory write   ********
***********************************
memory[101] = 1

current inst: add r1, r1, r6		// r1 = 102
current inst: .loop_start:

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[102] = 1

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[101] = 1

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[102] = 1

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[103] = 2

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[102] = 1

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[103] = 2

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[104] = 3

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[103] = 2

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[104] = 3

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[105] = 5

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[104] = 3

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[105] = 5

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[106] = 8

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[105] = 5

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[106] = 8

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[107] = 13

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[106] = 8

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[107] = 13

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[108] = 21

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[107] = 13

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[108] = 21

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[109] = 34

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[108] = 21

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[109] = 34

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[110] = 55

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[109] = 34

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[110] = 55

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[111] = 89

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[110] = 55

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[111] = 89

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[112] = 144

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[111] = 89

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[112] = 144

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[113] = 233

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[112] = 144

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[113] = 233

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[114] = 377

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[113] = 233

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[114] = 377

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[115] = 610

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[114] = 377

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[115] = 610

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[116] = 987

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[115] = 610

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[116] = 987

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[117] = 1597

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[116] = 987

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[117] = 1597

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[118] = 2584

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[117] = 1597

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[118] = 2584

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[119] = 4181

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[118] = 2584

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[119] = 4181

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[120] = 6765

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[119] = 4181

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[120] = 6765

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[121] = 10946

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[120] = 6765

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[121] = 10946

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[122] = 17711

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[121] = 10946

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[122] = 17711

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[123] = 28657

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[122] = 17711

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[123] = 28657

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: ldr r9, r3, 0		// r9 = prev number1

current inst: ldr r10, r5, 0		// r10 = prev number 2

current inst: add r11, r9, r10	// generate the next Fibonacci number

current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory write   ********
***********************************
memory[124] = 46368

current inst: add r1, r1, r6

current inst: add r9, r10, r4		// update prev number 1

current inst: add r10, r11, r4	// update prev number 2

current inst: add r3, r3, r6		// update prev number 1's memory base

current inst: add r5, r5, r6		// update prev number 2's memory base

current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory write   ********
***********************************
memory[123] = 28657

current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory write   ********
***********************************
memory[124] = 46368

current inst: sub r7, r7, r6		// r7 = r7 - 1

current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times

current inst: add r5, r5, r4		// else r5 = r5
Executed instruction #: 311
