
next inst: ldi r3, 100		// prev number1 memory base
current inst: ldi r1, 100		// memory base register
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0000 decimal: 0
R3: hex: 0000 decimal: 0
R4: hex: 0000 decimal: 0
R5: hex: 0000 decimal: 0
R6: hex: 0000 decimal: 0
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldi r5, 101		// prev number2 memory base
current inst: ldi r3, 100		// prev number1 memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0000 decimal: 0
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0000 decimal: 0
R6: hex: 0000 decimal: 0
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: 
current inst: ldi r5, 101		// prev number2 memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0000 decimal: 0
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0000 decimal: 0
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0
current inst: 

next inst: ldi r6, 1 		// constant 1
current inst: ldi r4, 0		// constant 0
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0000 decimal: 0
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0000 decimal: 0
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldi r2, 2		// constant 2
current inst: ldi r6, 1 		// constant 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0000 decimal: 0
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldi r7, 23		// constant 23
current inst: ldi r2, 2		// constant 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: 
current inst: ldi r7, 23		// constant 23
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0
current inst: 

next inst: add r1, r1, r6		// r1 = 101
current inst: str r4, r1, 0		// mem[100] = 0
***********************************
********   Memory update   ********
***********************************
memory[100] = 0
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0064 decimal: 100
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r6, r1, 0		// mem[101] = 1
current inst: add r1, r1, r6		// r1 = 101
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0065 decimal: 101
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6		// r1 = 102
current inst: str r6, r1, 0		// mem[101] = 1
***********************************
********   Memory update   ********
***********************************
memory[101] = 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0065 decimal: 101
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: 
current inst: add r1, r1, r6		// r1 = 102
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0066 decimal: 102
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0
current inst: 
current inst: .loop_start:

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0066 decimal: 102
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0000 decimal: 0
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0066 decimal: 102
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0001 decimal: 1
R11: hex: 0000 decimal: 0
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0066 decimal: 102
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[102] = 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0066 decimal: 102
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0000 decimal: 0
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0064 decimal: 100
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0065 decimal: 101
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[101] = 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[102] = 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0017 decimal: 23
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0001 decimal: 1
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[103] = 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0067 decimal: 103
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0001 decimal: 1
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0065 decimal: 101
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0066 decimal: 102
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[102] = 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[103] = 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0016 decimal: 22
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0002 decimal: 2
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[104] = 3
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0068 decimal: 104
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0001 decimal: 1
R10: hex: 0002 decimal: 2
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0002 decimal: 2
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0066 decimal: 102
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0067 decimal: 103
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[103] = 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[104] = 3
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0015 decimal: 21
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0003 decimal: 3
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[105] = 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0069 decimal: 105
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0002 decimal: 2
R10: hex: 0003 decimal: 3
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0003 decimal: 3
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0067 decimal: 103
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0068 decimal: 104
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[104] = 3
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[105] = 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0014 decimal: 20
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0005 decimal: 5
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[106] = 8
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006a decimal: 106
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0003 decimal: 3
R10: hex: 0005 decimal: 5
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0005 decimal: 5
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0068 decimal: 104
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 0069 decimal: 105
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[105] = 5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[106] = 8
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0013 decimal: 19
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 0008 decimal: 8
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[107] = 13
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006b decimal: 107
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0005 decimal: 5
R10: hex: 0008 decimal: 8
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 0008 decimal: 8
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 0069 decimal: 105
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006a decimal: 106
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[106] = 8
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[107] = 13
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0012 decimal: 18
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 000d decimal: 13
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[108] = 21
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006c decimal: 108
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 0008 decimal: 8
R10: hex: 000d decimal: 13
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 000d decimal: 13
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006a decimal: 106
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006b decimal: 107
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[107] = 13
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[108] = 21
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0011 decimal: 17
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0015 decimal: 21
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[109] = 34
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006d decimal: 109
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 000d decimal: 13
R10: hex: 0015 decimal: 21
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0015 decimal: 21
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006b decimal: 107
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006c decimal: 108
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[108] = 21
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[109] = 34
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 0010 decimal: 16
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0022 decimal: 34
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[110] = 55
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006e decimal: 110
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0015 decimal: 21
R10: hex: 0022 decimal: 34
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0022 decimal: 34
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006c decimal: 108
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006d decimal: 109
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[109] = 34
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[110] = 55
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000f decimal: 15
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0037 decimal: 55
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[111] = 89
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 006f decimal: 111
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0022 decimal: 34
R10: hex: 0037 decimal: 55
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0037 decimal: 55
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006d decimal: 109
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006e decimal: 110
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[110] = 55
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[111] = 89
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000e decimal: 14
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0059 decimal: 89
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[112] = 144
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0070 decimal: 112
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0037 decimal: 55
R10: hex: 0059 decimal: 89
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0059 decimal: 89
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006e decimal: 110
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 006f decimal: 111
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[111] = 89
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[112] = 144
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000d decimal: 13
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 0090 decimal: 144
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[113] = 233
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0071 decimal: 113
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0059 decimal: 89
R10: hex: 0090 decimal: 144
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 0090 decimal: 144
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 006f decimal: 111
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0070 decimal: 112
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[112] = 144
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[113] = 233
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000c decimal: 12
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 00e9 decimal: 233
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[114] = 377
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0072 decimal: 114
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 0090 decimal: 144
R10: hex: 00e9 decimal: 233
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 00e9 decimal: 233
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0070 decimal: 112
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0071 decimal: 113
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[113] = 233
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[114] = 377
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000b decimal: 11
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0179 decimal: 377
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[115] = 610
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0073 decimal: 115
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 00e9 decimal: 233
R10: hex: 0179 decimal: 377
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0179 decimal: 377
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0071 decimal: 113
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0072 decimal: 114
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[114] = 377
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[115] = 610
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 000a decimal: 10
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 0262 decimal: 610
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[116] = 987
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0074 decimal: 116
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0179 decimal: 377
R10: hex: 0262 decimal: 610
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 0262 decimal: 610
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0072 decimal: 114
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0073 decimal: 115
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[115] = 610
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[116] = 987
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0009 decimal: 9
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 03db decimal: 987
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[117] = 1597
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0075 decimal: 117
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 0262 decimal: 610
R10: hex: 03db decimal: 987
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 03db decimal: 987
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0073 decimal: 115
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0074 decimal: 116
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[116] = 987
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[117] = 1597
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0008 decimal: 8
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 063d decimal: 1597
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[118] = 2584
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0076 decimal: 118
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 03db decimal: 987
R10: hex: 063d decimal: 1597
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 063d decimal: 1597
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0074 decimal: 116
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0075 decimal: 117
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[117] = 1597
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[118] = 2584
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0007 decimal: 7
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 0a18 decimal: 2584
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[119] = 4181
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0077 decimal: 119
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 063d decimal: 1597
R10: hex: 0a18 decimal: 2584
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 0a18 decimal: 2584
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0075 decimal: 117
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0076 decimal: 118
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[118] = 2584
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[119] = 4181
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0006 decimal: 6
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1055 decimal: 4181
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[120] = 6765
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0078 decimal: 120
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 0a18 decimal: 2584
R10: hex: 1055 decimal: 4181
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1055 decimal: 4181
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0076 decimal: 118
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0077 decimal: 119
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[119] = 4181
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[120] = 6765
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0005 decimal: 5
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 1a6d decimal: 6765
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[121] = 10946
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 0079 decimal: 121
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1055 decimal: 4181
R10: hex: 1a6d decimal: 6765
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 1a6d decimal: 6765
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0077 decimal: 119
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0078 decimal: 120
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[120] = 6765
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[121] = 10946
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0004 decimal: 4
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 2ac2 decimal: 10946
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[122] = 17711
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007a decimal: 122
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 1a6d decimal: 6765
R10: hex: 2ac2 decimal: 10946
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 2ac2 decimal: 10946
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0078 decimal: 120
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 0079 decimal: 121
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[121] = 10946
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[122] = 17711
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0003 decimal: 3
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 452f decimal: 17711
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[123] = 28657
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007b decimal: 123
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 2ac2 decimal: 10946
R10: hex: 452f decimal: 17711
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 452f decimal: 17711
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 0079 decimal: 121
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007a decimal: 122
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[122] = 17711
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[123] = 28657
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0002 decimal: 2
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r9, r3, 0		// r9 = prev number1
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: ldr r10, r5, 0		// r10 = prev number 2
current inst: ldr r9, r3, 0		// r9 = prev number1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r11, r9, r10	// generate the next Fibonacci number
current inst: ldr r10, r5, 0		// r10 = prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: 6ff1 decimal: 28657
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r11, r1, 0		// store the next Fibonacci number
current inst: add r11, r9, r10	// generate the next Fibonacci number
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r1, r1, r6
current inst: str r11, r1, 0		// store the next Fibonacci number
***********************************
********   Memory update   ********
***********************************
memory[124] = 46368
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007c decimal: 124
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r9, r10, r4		// update prev number 1
current inst: add r1, r1, r6
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 452f decimal: 17711
R10: hex: 6ff1 decimal: 28657
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r10, r11, r4	// update prev number 2
current inst: add r9, r10, r4		// update prev number 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: 6ff1 decimal: 28657
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r3, r3, r6		// update prev number 1's memory base
current inst: add r10, r11, r4	// update prev number 2
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007a decimal: 122
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r6		// update prev number 2's memory base
current inst: add r3, r3, r6		// update prev number 1's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007b decimal: 123
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r9, r3, 0		// store prev number 1
current inst: add r5, r5, r6		// update prev number 2's memory base
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: str r10, r5, 0		// store prev number 2
current inst: str r9, r3, 0		// store prev number 1
***********************************
********   Memory update   ********
***********************************
memory[123] = 28657
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: sub r7, r7, r6		// r7 = r7 - 1
current inst: str r10, r5, 0		// store prev number 2
***********************************
********   Memory update   ********
***********************************
memory[124] = 46368
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0001 decimal: 1
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
current inst: sub r7, r7, r6		// r7 = r7 - 1
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: add r5, r5, r4		// else r5 = r5
current inst: bgtz	r7, .loop_start	// branch if not reaching 24 times
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0

next inst: end
current inst: add r5, r5, r4		// else r5 = r5
***********************************
*******   View registers   ********
***********************************
R0: hex: 0000 decimal: 0
R1: hex: 007d decimal: 125
R2: hex: 0002 decimal: 2
R3: hex: 007b decimal: 123
R4: hex: 0000 decimal: 0
R5: hex: 007c decimal: 124
R6: hex: 0001 decimal: 1
R7: hex: 0000 decimal: 0
R8: hex: 0000 decimal: 0
R9: hex: 6ff1 decimal: 28657
R10: hex: b520 decimal: 46368
R11: hex: b520 decimal: 46368
R12: hex: 0000 decimal: 0
R13: hex: 0000 decimal: 0
R14: hex: 0000 decimal: 0
R15: hex: 0000 decimal: 0
Executed instruction #: 311
