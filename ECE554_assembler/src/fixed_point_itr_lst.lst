          // fixed point iteration
          // get square root of a given number C
          // x(n+1) = 1/2 * [x(n) + C / x(n)]
          
          // initialization
PC: 0000 Binary: 1100000100000000 Hex: c100 ldi r1,	0		// r1 will be the division counter and memory base index
PC: 0001 Binary: 1100001000000100 Hex: c204 ldi r2, 4	// r2 <-64, r2 contains C
PC: 0002 Binary: 0001001100100001 Hex: 1321 add r3, r2, r1	// r3 = r2, r3 will always be a copy of r2
PC: 0003 Binary: 1100010000000001 Hex: c401 ldi r4, 1		// r4 will serve as x(n)
PC: 0004 Binary: 1100010100000000 Hex: c500 ldi r5, 0		// r5 will serve as x(n+1)
PC: 0005 Binary: 1100011000000001 Hex: c601 ldi r6, 1		// constant 1
PC: 0006 Binary: 1100100000000000 Hex: c800 ldi r8, 0		// constant 0
          
          // main program
0007      .main_start:
PC: 0007 Binary: 0001000110001000 Hex: 1188 add r1, r8, r8	// reset r1
0008      .divide_start:
PC: 0008 Binary: 0010001100110100 Hex: 2334 sub r3, r3, r4
PC: 0009 Binary: 1010001100000010 Hex: a302 bltz	r3, .divide_end
PC: 000a Binary: 0001000100010110 Hex: 1116 add r1, r1, r6	// increment counter
PC: 000b Binary: 1111111111110000 Hex: fff0 j		.divide_start
000c      .divide_end:
PC: 000c Binary: 0001000100010100 Hex: 1114 add r1, r1, r4	// r1 = r1 + r4 = C / x(n) + x (n)
PC: 000d Binary: 0111010100010110 Hex: 7516 sra r5, r1, r6	// r5 = r1 >> 1 = r1 / 2 ==> x(n+1) = 1/2 * [x(n) + C / x(n)]
PC: 000e Binary: 0001001100101000 Hex: 1328 add r3, r2, r8	// reset r3, so that r3 = r2 = C again
PC: 000f Binary: 0010011101010100 Hex: 2754 sub r7, r5, r4
PC: 0010 Binary: 1001011100000010 Hex: 9702 beqz	r7, .main_end
PC: 0011 Binary: 0001010001011000 Hex: 1458 add r4, r5, r8	// r4 = r5 + 0 = r5
PC: 0012 Binary: 1111111111010000 Hex: ffd0 j		.main_start
0013      .main_end:
PC: 0013 Binary: 0001010101011000 Hex: 1558 add	r5, r5, r8	// r5 = r5 + 0 = r5
          
