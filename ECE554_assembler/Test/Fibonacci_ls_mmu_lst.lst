PC: 0000 Binary: 1100000011111111 Hex: c0ff ldi r0, 0xff		// assign 0xffff to r0
PC: 0001 Binary: 1111000000000001 Hex: f001 jr  r0, 0		// jump to 0xffff
PC: 0002 Binary: 0000000000000000 Hex: 0000 nop
PC: 0003 Binary: 0000000000000000 Hex: 0000 nop
PC: 0004 Binary: 1100000101100100 Hex: c164 ldi r1, 100		// memory base register
PC: 0005 Binary: 1100001101100100 Hex: c364 ldi r3, 100		// prev number1 memory base
PC: 0006 Binary: 1100010101100101 Hex: c565 ldi r5, 101		// prev number2 memory base
PC: 0007 Binary: 1100010000000000 Hex: c400 ldi r4, 0		// constant 0
PC: 0008 Binary: 1100011000000001 Hex: c601 ldi r6, 1 		// constant 1
PC: 0009 Binary: 1100001000000010 Hex: c202 ldi r2, 2		// constant 2
PC: 000a Binary: 1100011100010111 Hex: c717 ldi r7, 23		// constant 23
PC: 000b Binary: 1101010000010000 Hex: d410 str r4, r1, 0		// mem[100] = 0
PC: 000c Binary: 0001000100010110 Hex: 1116 add r1, r1, r6		// r1 = 101
PC: 000d Binary: 1101011000010000 Hex: d610 str r6, r1, 0		// mem[101] = 1
PC: 000e Binary: 0001000100010110 Hex: 1116 add r1, r1, r6		// r1 = 102
000f      .loop_start:
PC: 000f Binary: 1110100100110000 Hex: e930 ldr r9, r3, 0		// r9 = prev number1
PC: 0010 Binary: 1110101001010000 Hex: ea50 ldr r10, r5, 0		// r10 = prev number 2
PC: 0011 Binary: 0001101110011010 Hex: 1b9a add r11, r9, r10	// generate the next Fibonacci number
PC: 0012 Binary: 1101101100010000 Hex: db10 str r11, r1, 0		// store the next Fibonacci number
PC: 0013 Binary: 0001000100010110 Hex: 1116 add r1, r1, r6
PC: 0014 Binary: 0001100110100100 Hex: 19a4 add r9, r10, r4		// update prev number 1
PC: 0015 Binary: 0001101010110100 Hex: 1ab4 add r10, r11, r4	// update prev number 2
PC: 0016 Binary: 0001001100110110 Hex: 1336 add r3, r3, r6		// update prev number 1's memory base
PC: 0017 Binary: 0001010101010110 Hex: 1556 add r5, r5, r6		// update prev number 2's memory base
PC: 0018 Binary: 1101100100110000 Hex: d930 str r9, r3, 0		// store prev number 1
PC: 0019 Binary: 1101101001010000 Hex: da50 str r10, r5, 0		// store prev number 2
PC: 001a Binary: 0010011101110110 Hex: 2776 sub r7, r7, r6		// r7 = r7 - 1
PC: 001b Binary: 1011011111110011 Hex: b7f3 bgtz	r7, .loop_start	// branch if not reaching 24 times
PC: 001c Binary: 0001010101010100 Hex: 1554 add r5, r5, r4		// else r5 = r5
PC: 001d Binary: 1100000001111100 Hex: c07c ldi r0, 124	// start storing registers from mem[248]
PC: 001e Binary: 0001000000000000 Hex: 1000 add r0, r0, r0	
PC: 001f Binary: 1101000100000000 Hex: d100 str r1, r0, 0
PC: 0020 Binary: 1101001000000001 Hex: d201 str r2, r0, 1
PC: 0021 Binary: 1101001100000010 Hex: d302 str r3, r0, 2
PC: 0022 Binary: 1101010000000011 Hex: d403 str r4, r0, 3
PC: 0023 Binary: 1101010100000100 Hex: d504 str r5, r0, 4
PC: 0024 Binary: 1101011000000101 Hex: d605 str r6, r0, 5
PC: 0025 Binary: 1101011100000110 Hex: d706 str r7, r0, 6
PC: 0026 Binary: 1101100000000111 Hex: d807 str r8, r0, 7
PC: 0027 Binary: 1101100100001000 Hex: d908 str r9, r0, 8
PC: 0028 Binary: 1101101000001001 Hex: da09 str r10, r0, 9
PC: 0029 Binary: 1101101100001010 Hex: db0a str r11, r0, 10
PC: 002a Binary: 1101110000001011 Hex: dc0b str r12, r0, 11
PC: 002b Binary: 1101110100001100 Hex: dd0c str r13, r0, 12
PC: 002c Binary: 1101111000001101 Hex: de0d str r14, r0, 13
PC: 002d Binary: 1101111100001110 Hex: df0e str r15, r0, 14
PC: 002e Binary: 1100000000000000 Hex: c000 ldi r0, 0
PC: 002f Binary: 1111000000000001 Hex: f001 jr	r0, 0
