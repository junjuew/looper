PC: 0000 Binary: 1100000011111111 Hex: c0ff ldi r0, 0xff		// assign 0xffff to r0
PC: 0001 Binary: 1111000000000001 Hex: f001 jr  r0, 0		// jump to 0xffff
PC: 0002 Binary: 0000000000000000 Hex: 0000 nop
PC: 0003 Binary: 0000000000000000 Hex: 0000 nop
PC: 0004 Binary: 1100000100000000 Hex: c100 ldi r1, 0		// this would be the counter
PC: 0005 Binary: 1100001000000000 Hex: c200 ldi r2, 0		// this would be prev number1
PC: 0006 Binary: 1100001100000001 Hex: c301 ldi r3, 1 		// this would be prev number2
PC: 0007 Binary: 1100010000000000 Hex: c400 ldi r4, 0		// constant 0
PC: 0008 Binary: 1100011000000001 Hex: c601 ldi r6, 1 		// constant 1
PC: 0009 Binary: 1100011100010111 Hex: c717 ldi r7, 23		// constant 24
000a      .loop_start:
PC: 000a Binary: 0001010100100011 Hex: 1523 add	r5, r2, r3	// generate the next Fibonacci number
PC: 000b Binary: 0001001000110100 Hex: 1234 add r2, r3, r4	// update prev number 1
PC: 000c Binary: 0001001101010100 Hex: 1354 add r3, r5, r4	// update prev number 5
PC: 000d Binary: 0010011101110110 Hex: 2776 sub r7, r7, r6	// r7 = r7 - 1
PC: 000e Binary: 1011011111111011 Hex: b7fb bgtz	r7, .loop_start	// branch if not reaching 24 times
PC: 000f Binary: 0001010101010100 Hex: 1554 add r5, r5, r4	// else r5 = r5
