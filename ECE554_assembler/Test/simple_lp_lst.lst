PC: 0000 Binary: 1100000100000000 Hex: c100 ldi r1, 0		// this would be the counter
PC: 0001 Binary: 1100001000000000 Hex: c200 ldi r2, 0		// this would be prev number1
PC: 0002 Binary: 1100001100000001 Hex: c301 ldi r3, 1 		// this would be prev number2
PC: 0003 Binary: 1100010000000000 Hex: c400 ldi r4, 0		// constant 0
PC: 0004 Binary: 1100011000000001 Hex: c601 ldi r6, 1 		// constant 1
PC: 0005 Binary: 1100011100001011 Hex: c70b ldi r7, 11		// constant 11
0006      .loop_start:
PC: 0006 Binary: 0001010100100011 Hex: 1523 add	r5, r2, r3	// generate the next Fibonacci number
PC: 0007 Binary: 0001001000110100 Hex: 1234 add r2, r3, r4	// update prev number 1
PC: 0008 Binary: 0001001101010100 Hex: 1354 add r3, r5, r4	// update prev number 5
PC: 0009 Binary: 0001000100010110 Hex: 1116 add r1, r1, r6	// update counter
PC: 000a Binary: 0010100001110001 Hex: 2871 sub r8, r7, r1	// check counter
PC: 000b Binary: 1011100011111010 Hex: b8fa bgtz	r8, .loop_start	// branch if not reaching 11 times
PC: 000c Binary: 0001010101010100 Hex: 1554 add r5, r5, r4	// else r5 = r5
PC: 000d Binary: 1100000000110010 Hex: c032 ldi r0, 50	
PC: 000e Binary: 1101000100000000 Hex: d100 str r1, r0, 0
PC: 000f Binary: 1101001000000001 Hex: d201 str r2, r0, 1
PC: 0010 Binary: 1101001100000010 Hex: d302 str r3, r0, 2
PC: 0011 Binary: 1101010000000011 Hex: d403 str r4, r0, 3
PC: 0012 Binary: 1101010100000100 Hex: d504 str r5, r0, 4
PC: 0013 Binary: 1101011000000101 Hex: d605 str r6, r0, 5
PC: 0014 Binary: 1101011100000110 Hex: d706 str r7, r0, 6
PC: 0015 Binary: 1101100000000111 Hex: d807 str r8, r0, 7
PC: 0016 Binary: 1101100100001000 Hex: d908 str r9, r0, 8
PC: 0017 Binary: 1101101000001001 Hex: da09 str r10, r0, 9
PC: 0018 Binary: 1101101100001010 Hex: db0a str r11, r0, 10
PC: 0019 Binary: 1101110000001011 Hex: dc0b str r12, r0, 11
PC: 001a Binary: 1101110100001100 Hex: dd0c str r13, r0, 12
PC: 001b Binary: 1101111000001101 Hex: de0d str r14, r0, 13
PC: 001c Binary: 1101111100001110 Hex: df0e str r15, r0, 14
